summary(math)
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
summary(math)
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
summary(math)
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
summary(math)
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
math
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table('student-mat.csv', sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table('student-por.csv', sep = ";", header = TRUE)
math
setwd("~/GitHub/IODS-project/data")
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
math
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
# explore data
str(math)
str(por)
dim(math)
dim(str)
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
# explore data
str(math)
str(por)
dim(math)
dim(por)
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
# explore data
str(math)
str(por)
dim(math)
dim(por)
# access the dplyr library
library(dplyr)
# common columns to use as identifiers
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# explore joined data
str(math_por)
dim(math_por)
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
# explore data
str(math)
str(por)
dim(math)
dim(por)
# access the dplyr library
library(dplyr)
# common columns to use as identifiers
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# explore joined data
str(math_por)
dim(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# print out the columns not used for joining
notjoined_columns
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
# explore data
str(math)
str(por)
dim(math)
dim(por)
# access the dplyr library
library(dplyr)
# common columns to use as identifiers
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# explore joined data
str(math_por)
dim(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
alc
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
# explore data
str(math)
str(por)
dim(math)
dim(por)
# access the dplyr library
library(dplyr)
# common columns to use as identifiers
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# explore joined data
str(math_por)
dim(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc
alc
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
# explore data
str(math)
str(por)
dim(math)
dim(por)
# access the dplyr library
library(dplyr)
# common columns to use as identifiers
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# explore joined data
str(math_por)
dim(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
# define a new logical column 'high_use'
alc <- mutate(alc, high_use = alc_use > 2)
alc
# Heinonen Petri
# 10.2.2017
# This script includes R code for data wrangling in assignment 3. of IODS-course
filename_math <- 'student-mat.csv'
filename_por <- 'student-por.csv'
# read the math class questionaire data into memory
math <- read.table(filename_math, sep = ";" , header=TRUE)
# read the portuguese class questionaire data into memory
por <- read.table(filename_por, sep = ";", header = TRUE)
# explore data
str(math)
str(por)
dim(math)
dim(por)
# access the dplyr library
library(dplyr)
# common columns to use as identifiers
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# explore joined data
str(math_por)
dim(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
# define a new logical column 'high_use'
alc <- mutate(alc, high_use = alc_use > 2)
# glimpse
glimpse(alc)
# write data to csv
write.csv(alc, file = 'alc.csv')
---
title: "chapter3"
author: "Petri Heinonen"
date: "2/10/2017"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Logistic regression
This is the third chapter including logistic regression analysis.
```{r}
# Read data from URL
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep=",", header=TRUE)
str(alc)
dim(alc)
```
knitr::opts_chunk$set(echo = TRUE)
# Read data from URL
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep=",", header=TRUE)
str(alc)
dim(alc)
```{r}
# find the model with glm()
m <- glm(high_use ~ sex + age + romantic + absences, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
# find the model with glm()
m <- glm(high_use ~ sex + age + romantic + absences, data = alc, family = "binomial")
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# Access the dplyr and ggplot2 libraries
library(dplyr)
library(ggplot2)
library(GGally)
# Read data from URL
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep=",", header=TRUE)
str(alc)
dim(alc)
# find the model with glm()
m <- glm(high_use ~ sex + age + romantic + absences, data = alc, family = "binomial")
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# initialise a plot of high_use and absences
g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
# initialise a plot of high_use and absences
g2 <- ggplot(alc, aes(x = high_use, y = romantic, col = sex))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ggtitle("Student alcohol consumption, relationship status and sex")
g2 + geom_boxplot() + ggtitle("Student alcohol consumption, age and sex")
# initialise a plot of high_use and absences
g2 <- ggplot(alc, aes(x = high_use, y = age, col = sex))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ggtitle("Student alcohol consumption, age and sex")
# access the tidyverse libraries tidyr, dplyr, ggplot2
library(tidyr); library(dplyr); library(ggplot2)
install.packages("tidyverse")
# draw a bar plot of each variable
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
library(tidyr); library(dplyr); library(ggplot2)
install.packages("tidyr")
install.packages("tidyr")
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
# find the model with glm()
m <- glm(high_use ~ sex + age + romantic + absences, data = alc, family = "binomial")
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
m <- glm(high_use ~ sex + age + romantic + absences, data = alc, family = "binomial")
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# fit the model
m <- glm(high_use ~ sex + absences, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
```{r}
# define a loss function (mean prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
